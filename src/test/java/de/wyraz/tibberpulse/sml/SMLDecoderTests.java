package de.wyraz.tibberpulse.sml;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatCode;

import java.io.IOException;

import org.apache.commons.codec.binary.Hex;
import org.junit.Test;

import de.wyraz.tibberpulse.sml.SMLDecoder;

public class SMLDecoderTests {

	@Test
	public void testSMLDecoderInvalidStartSequence() throws Exception {
		String payload="1c1b1b1b010101017605128e14cf620062007265000001017601010765425a4444330b090145425a0100091f14010163df26007605128e14d06200620072650000070177010b090145425a0100091f14017262016505e465007a77078181c78203ff010101010445425a0177070100000009ff010101010b090145425a0100091f140177070100010800ff6401018001621e52fb69000002a05939af070177070100010801ff0101621e52fb69000002a0531f2f070177070100010802ff0101621e52fb6900000000061a80000177070100020800ff6401018001621e52fb69000000000d7b8b460177070100100700ff0101621b52fe5500013c060177070100240700ff0101621b52fe55000058f00177070100380700ff0101621b52fe55000085f901770701004c0700ff0101621b52fe5500005d1d010101636c93007605128e14d162006200726500000201710163c682000000001b1b1b1b1a032f09";
		
		assertThatCode(()->{
			SMLDecoder.decode(Hex.decodeHex(payload));
		})
			.isInstanceOf(IOException.class)
			.hasMessageStartingWith("Invalid SML payload: 1c1b1b1");
	}
	@Test
	public void testSMLDecoderInvalidEndSequence() throws Exception {
		String payload="1b1b1b1b010101017605128e14cf620062007265000001017601010765425a4444330b090145425a0100091f14010163df26007605128e14d06200620072650000070177010b090145425a0100091f14017262016505e465007a77078181c78203ff010101010445425a0177070100000009ff010101010b090145425a0100091f140177070100010800ff6401018001621e52fb69000002a05939af070177070100010801ff0101621e52fb69000002a0531f2f070177070100010802ff0101621e52fb6900000000061a80000177070100020800ff6401018001621e52fb69000000000d7b8b460177070100100700ff0101621b52fe5500013c060177070100240700ff0101621b52fe55000058f00177070100380700ff0101621b52fe55000085f901770701004c0700ff0101621b52fe5500005d1d010101636c93007605128e14d162006200726500000201710163c682000000001c1b1b1b1a032f09";
		
		assertThatCode(()->{
			SMLDecoder.decode(Hex.decodeHex(payload));
		})
			.isInstanceOf(IOException.class)
			.hasMessageStartingWith("Invalid SML payload: 1b1b1b1");
	}
	@Test
	public void testSMLDecoderInvalidCRC() throws Exception {
		String payload="1b1b1b1b010101017605128e14cf620062007265000001017601010765425a4444330b090145425a0100091f14010163df26007605128e14d06200620072650000070177010b090145425a0100091f14017262016505e465007a77078181c78203ff010101010445425a0177070100000009ff010101010b090145425a0100091f140177070100010800ff6401018001621e52fb69000002a05939af070177070100010801ff0101621e52fb69000002a0531f2f070177070100010802ff0101621e52fb6900000000061a80000177070100020800ff6401018001621e52fb69000000000d7b8b460177070100100700ff0101621b52fe5500013c060177070100240700ff0101621b52fe55000058f00177070100380700ff0101621b52fe55000085f901770701004c0700ff0101621b52fe5500005d1d010101636c93007605128e14d162006200726500000201710163c682000000001b1b1b1b1a032f08";
		
		assertThatCode(()->{
			SMLDecoder.decode(Hex.decodeHex(payload));
		})
			.isInstanceOf(IOException.class)
			.hasMessage("Invalid SML payload: wrong crc");
	}
	
	/**
	 * Initial test with data from my own meter
	 */
	@Test
	public void testSMLDecoderEBZ() throws Exception {
		String payload="1b1b1b1b010101017605128e14cf620062007265000001017601010765425a4444330b090145425a0100091f14010163df26007605128e14d06200620072650000070177010b090145425a0100091f14017262016505e465007a77078181c78203ff010101010445425a0177070100000009ff010101010b090145425a0100091f140177070100010800ff6401018001621e52fb69000002a05939af070177070100010801ff0101621e52fb69000002a0531f2f070177070100010802ff0101621e52fb6900000000061a80000177070100020800ff6401018001621e52fb69000000000d7b8b460177070100100700ff0101621b52fe5500013c060177070100240700ff0101621b52fe55000058f00177070100380700ff0101621b52fe55000085f901770701004c0700ff0101621b52fe5500005d1d010101636c93007605128e14d162006200726500000201710163c682000000001b1b1b1b1a032f09";
				
		SMLMeterData data=SMLDecoder.decode(Hex.decodeHex(payload));
		
		assertThat(data).isNotNull();
		
		assertThat(data.getMeterId()).isEqualTo("1EBZ0100597780");
		
		assertThat(data.getReadings())
			.isNotNull()
			.extracting(Object::toString)
			.containsExactlyInAnyOrder(
					  "1-0:1.8.0*255 / energyImportTotal = 28877149.75495 WATT_HOUR",
					  "1-0:1.8.1*255 / energyImportTariff1 = 28876125.75495 WATT_HOUR",
					  "1-0:1.8.2*255 / energyImportTariff2 = 1024.00000 WATT_HOUR",
					  "1-0:2.8.0*255 / energyExportTotal = 2262.00390 WATT_HOUR",
					  "1-0:16.7.0*255 / powerTotal = 809.02 WATT",
					  "1-0:36.7.0*255 / powerL1 = 227.68 WATT",
					  "1-0:56.7.0*255 / powerL2 = 342.97 WATT",
					  "1-0:76.7.0*255 / powerL3 = 238.37 WATT"
					);
		
	}
	
	/**
	 * Initial test with data from my own meter
	 */
	@Test
	public void testSMLDecoderEFR() throws Exception {
		String payload="1b1b1b1b010101017605080e16b66200620072630101760107ffffffffffff0502af5ce80b0a014546522102cd630c7262016502af5ce5016333fe007605080e16b762006200726307017707ffffffffffff0b0a014546522102cd630c070100620affff7262016502af5ce579770701006032010101010101044546520177070100600100ff010101010b0a014546522102cd630c0177070100010800ff641c40047262016502af5ce5621e52ff65016d58b80177070100020800ff017262016502af5ce5621e52ff650286c57c017707010000020000010101010630332e30300177070100605a0201010101010342bd01770701006161000001010101030000017707010060320104010101010850312e322e31320177070100603204040101010103042201010163c14a007605080e16b862006200726302017101639568000000001b1b1b1b1a0309d3";
				
		SMLMeterData data=SMLDecoder.decode(Hex.decodeHex(payload));
		
		System.err.println(data);
		
		assertThat(data).isNotNull();
		
		assertThat(data.getMeterId()).isEqualTo("1EFR3347014668");
		
		assertThat(data.getReadings())
			.isNotNull()
			.extracting(Object::toString)
			.containsExactlyInAnyOrder(
					 "1-0:1.8.0*255 / energyImportTotal = 2394335.2 WATT_HOUR",
					 "1-0:2.8.0*255 / energyExportTotal = 4238681.2 WATT_HOUR"
					);

	}
	
}
